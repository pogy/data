package cn.com.jtang.dao;

import cn.com.jtang.po.CreateTable;
import cn.com.jtang.po.RecordType;
import cn.com.jtang.po.RecordTypeExample;

import java.util.List;

import cn.com.jtang.po.TableField;
import cn.com.jtang.po.custom.FondsRecordType;
import cn.com.jtang.po.custom.FondsTree;
import cn.com.jtang.web.controller.form.template.Column;

import org.apache.ibatis.annotations.Param;

public interface RecordTypeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int countByExample(RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int deleteByExample(RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int insert(RecordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int insertSelective(RecordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    List<RecordType> selectByExample(RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    List<FondsRecordType> selectAddFondsByExample(RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    RecordType selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int updateByExampleSelective(@Param("record") RecordType record, @Param("example") RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int updateByExample(@Param("record") RecordType record, @Param("example") RecordTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int updateByPrimaryKeySelective(RecordType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    List<FondsTree> selectAccessRecordTree(@Param("userid")String userid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table recordtype
     *
     * @mbggenerated Fri Jul 22 10:57:40 CST 2016
     */
    int updateByPrimaryKey(RecordType record);




    int createRecordTable(CreateTable record);



    int createVolumeTable(CreateTable record);



    int createDocumentTable(CreateTable record);



    int createPieceTable(CreateTable record);



    int createPieceDocumentTable(CreateTable record);

    int insertFields(TableField tableField);

    List<TableField> getCustomValueFields(@Param("recordtypeid") String recordtypeid, @Param("type") String type);

    TableField getTitle(@Param("recordtypeid") String recordtypeid, @Param("type") String type);

    List<TableField> getCustomIndexFields(@Param("recordtypeid") String recordtypeid, @Param("type") String type);

    List<TableField> getFields(@Param("recordtypeid") String recordtypeid, @Param("type") String type);

    List<String> getBasicFields(@Param("recordtypeid") String recordtypeid, @Param("type") String type);


    List<TableField> getAllFields(@Param("recordtypeid") String recordtypeid, @Param("type") String type);


    List<TableField> getAllFieldsImf(@Param("recordtypeid") String recordtypeid, @Param("type") String type);

    //List<TableField> searchResultRecord(@Param("recordtypeid") String recordtypeid, @Param("type") String type, @Param("cols") List<Column> cols);

    
    List<FondsTree> getAllBasicField();

    int deleteTable(@Param("tablenames")List<String> tablenames);
    
    
    int deleteTableFieldByRecordTypeId(String recordtypeid);


    List<String> getTableNames(@Param("recordtypeid")String recordtypeid);

    List<String> getDocumentPaths(@Param("tablePrefix")String tablePrefix);

    List<String> selectIds();

    void indexAddOne(String recordtype);

    void indexMinusOne(String recordtype);

    List<TableField> getRecordIdOrValueFields (@Param("recordtypeid") String recordtypeid, @Param("type") String type);




    /*List<Table> selectTableByRecordTypeId(String recordtypeid);*/
}