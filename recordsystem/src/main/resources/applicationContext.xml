<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd


		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- 导入applicationContext文件 -->
    <import resource="classpath:applicationContext-mapper.xml"/>
    <import resource="classpath:applicationContext-service.xml"/>
    <import resource="classpath:applicationContext-shiro.xml"/>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/jdbc.properties</value>
                <value>classpath:/config.properties</value>
                <value>classpath:/redis.properties</value>
            </list>
        </property>
    </bean>
    <!-- <bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
         <property name="servers" value="192.168.2.86:11212,host2:11213"/>
         <property name="protocol" value="BINARY"/>
         <property name="transcoder">
             <bean class="net.spy.memcached.transcoders.SerializingTranscoder">
                 <property name="compressionThreshold" value="1024"/>
             </bean>
         </property>
         <property name="opTimeout" value="1000"/>
         <property name="timeoutExceptionThreshold" value="1998"/>
         <property name="hashAlg" value="KETAMA_HASH"/>
         <property name="locatorType" value="CONSISTENT"/>
         <property name="failureMode" value="Redistribute"/>
         <property name="useNagleAlgorithm" value="false"/>
     </bean>-->
    <bean id="exceptionHandler" class="cn.com.jtang.exception.MyExceptionHandler"/>

    <!-- <bean id="propertyConfigurer2" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/config.properties"> </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" /> </bean> -->


    <!-- <bean id="propertyConfigurer2" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/redis.properties"> </property>
        </bean> -->
    <!-- 配置一个数据源 -->
    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" /> <property
        name="url" value="${jdbc.url}" /> <property name="username" value="${jdbc.username}"
        /> <property name="password" value="${jdbc.password}" /> </bean> -->
    <!--druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url.ykhl}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="50000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <!--c3p0-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url.ykhl}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="acquireIncrement" value="5"/>
        <property name="acquireRetryAttempts" value="10"/>
        <property name="acquireRetryDelay" value="3000"/>
        <property name="autoCommitOnClose" value="true"/>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="checkoutTimeout" value="10000"/>
        <property name="initialPoolSize" value="6"/>
        <property name="maxIdleTime" value="10000"/>
        <property name="maxPoolSize" value="10"/>
        <property name="minPoolSize" value="1"/>
        <property name="maxStatements" value="0"/>
        <property name="numHelperThreads" value="3"/>
        <property name="propertyCycle" value="600"/>
        <property name="maxStatementsPerConnection" value="0"/>
    </bean>
    <bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url.ykhl_ext}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="acquireIncrement" value="5"/>
        <property name="acquireRetryAttempts" value="10"/>
        <property name="acquireRetryDelay" value="3000"/>
        <property name="autoCommitOnClose" value="true"/>
        <property name="breakAfterAcquireFailure" value="false"/>
        <property name="checkoutTimeout" value="10000"/>
        <property name="initialPoolSize" value="6"/>
        <property name="maxIdleTime" value="10000"/>
        <property name="maxPoolSize" value="10"/>
        <property name="minPoolSize" value="1"/>
        <property name="maxStatements" value="0"/>
        <property name="numHelperThreads" value="3"/>
        <property name="propertyCycle" value="600"/>
        <property name="maxStatementsPerConnection" value="0"/>
    </bean>-->
    <!-- 配置bonecp -->
    <!--<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url.ykhl}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="idleConnectionTestPeriodInMinutes" value="60"/>
        <property name="IdleMaxAgeInMinutes" value="10"/>
        <property name="maxConnectionsPerPartition" value="30"/>
        <property name="minConnectionsPerPartition" value="10"/>
        <property name="partitionCount" value="3"/>
        <property name="acquireIncrement" value="5"/>
        <property name="statementsCacheSize" value="100"/>
        <property name="QueryExecuteTimeLimitInMs" value="3000000"/>
        <property name="releaseHelperThreads" value="3"/>
    </bean>-->
    <!-- 配置bonecp -->
    <!--<bean id="dataSource2" class="com.jolbox.bonecp.BoneCPDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url.ykhl_ext}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="idleConnectionTestPeriodInMinutes" value="60"/>
        <property name="IdleMaxAgeInMinutes" value="10"/>
        <property name="maxConnectionsPerPartition" value="30"/>
        <property name="minConnectionsPerPartition" value="10"/>
        <property name="partitionCount" value="3"/>
        <property name="acquireIncrement" value="5"/>
        <property name="statementsCacheSize" value="100"/>
        <property name="QueryExecuteTimeLimitInMs" value="3000000"/>
        <property name="releaseHelperThreads" value="3"/>
    </bean>-->

    <!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" /> <property name="port" value="${redis.port}"
        /> <property name="poolConfig" ref="jedisPoolConfig" /> </bean> <bean id="jedisPoolConfig"
        class="redis.clients.jedis.JedisPoolConfig"> <property name="maxActive" value="${redis.pool.maxActive}"
        /> <property name="maxIdle" value="${redis.pool.maxIdle}" /> <property name="maxWait"
        value="${redis.pool.maxWait}" /> <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"
        /> </bean> -->

    <!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" /> </bean> -->

    <!--<bean id="multipleDataSource" class="cn.com.jtang.datasource.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="applyDataSource" value-ref="dataSource"/>
                &lt;!&ndash;<entry key="ykhlExtDataSource" value-ref="dataSource2"/>&ndash;&gt;
            </map>
        </property>
    </bean>-->

    <!-- 配置MyBatis的SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="dataSource" ref="multipleDataSource"/>-->
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="dataSource" ref="multipleDataSource"/>-->
    </bean>

    <!-- 国际化配置 使用message.properties资源文件，spring会根据当前语言查找message_zh_CN.properties文件，应用国际化 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="message"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对增、删、改方法进行事务支持 -->
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <!-- 对查找方法进行只读事务 -->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <!-- 对其它方法进行只读事务 -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <bean id="app" class="cn.com.jtang.util.ApplicationUtil">
    </bean>

    <bean id="jobFactory" class="cn.com.jtang.quartz.MyJobFactory"></bean>
    <!--quartz配置 动态配置所以我们将 Factory 作为一个service一样的接口 QuartzJobFactory.java 调度工厂 -->
    <bean
            id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property
                name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
        <property
                name="jobFactory" ref="jobFactory"></property>
    </bean>


    <!--<bean id="loggerService" class="cn.com.jtang.service.impl.LoggerServiceImpl"/>
    <aop:config>

        &lt;!&ndash; 切入点 &ndash;&gt;
        &lt;!&ndash; 切面： 将哪个对象中的哪个方法，织入到哪个切入点 &ndash;&gt;
        <aop:aspect id="dd" ref="loggerService" order="1">
            <aop:pointcut
                    expression="execution(* cn.com.jtang.service.impl.AppApplyRecordServiceImpl.*(..))
						or execution(* cn.com.jtang.service.impl.AppHosResourceServiceImpl.*(..))
						or execution(* cn.com.jtang.service.impl.ShiroUserServiceImpl.getAuthenticatedUser(..))
						or execution(* cn.com.jtang.service.impl.AppRecordViewServiceImpl.applyResource(..))
						or execution(* cn.com.jtang.service.impl.AppRecordViewServiceImpl.confirmApply(..))
						or execution(* cn.com.jtang.service.impl.AppRecordViewServiceImpl.rejectApply(..))
						or execution(* cn.com.jtang.service.impl.AppRecordViewServiceImpl.cancelApply(..))
						"
                    id="myPointcut1"/>
            &lt;!&ndash; 前置通知 &ndash;&gt;
            <aop:before method="log" pointcut-ref="myPointcut1"/>
            <aop:after method="logArg" pointcut-ref="myPointcut1"/>

            <aop:after-returning method="logArgAndReturn"
                                 returning="returnObj" pointcut-ref="myPointcut1"></aop:after-returning>
        </aop:aspect>
        <aop:aspect id="dd2" ref="loggerService" order="1">
            <aop:pointcut
                    expression="execution(* cn.com.jtang.service.impl.StatisticsServiceImpl.*(..))
						or execution(* cn.com.jtang.service.impl.RecLogServiceImpl.*(..))
						or execution(* cn.com.jtang.service.impl.BackupMessageServiceImpl.*(..))
						or execution(* cn.com.jtang.service.impl.BackupMessageMonitorServiceImpl.*(..))
						"
                    id="myPointcut2"/>
            &lt;!&ndash; 前置通知 &ndash;&gt;
            <aop:before method="extlog" pointcut-ref="myPointcut2"/>
            <aop:after method="extlogArg" pointcut-ref="myPointcut2"/>
        </aop:aspect>
    </aop:config>-->

</beans>